<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="boardFree">

<!-- 	<sql id="search">
		<if test="types != null">
			where
			<trim prefixOverrides="or">
				<foreach item="type" collection="types">
					<trim prefix="or">
						<choose>
							<when test="type == 'title'.toString()">
								board_title like concat('%', #{keyword}, '%')
							</when>
							<when test="type == 'content'.toString()">
								board_content like concat('%', #{keyword}, '%')
							</when>
							<when test="type == 'writer'.toString()">
								member_name like concat('%', #{keyword}, '%')
							</when>
						</choose>
					</trim>
				</foreach>
			</trim>
		</if>
	</sql> -->

	<select id="selectAllSearch" parameterType="map" resultType="boardFreeDTO">
		select f.board_id , f.member_id, f.member_nickname ,  f.board_title
			, f.board_update_date, f.board_register_date , f.board_read_count , ifnull(l.like_count, 0) board_like_count, ifnull(r.reply_count, 0) board_reply_count
		from
		(
			select f.board_id , f.member_id, m.member_nickname ,  f.board_title
			, f.board_update_date, f.board_register_date , f.board_read_count 
			from tbl_board_free f
			left outer join tbl_member m
			on f.member_id = m.member_id
		) f
		left outer join 
		(
			select l.board_id, count(l.like_id) like_count
			from tbl_board_free_like l
			group by l.board_id 
		) l
		on l.board_id = f.board_id 
		left outer join
		(
			select r.board_id, count(r.reply_id) reply_count
			from tbl_board_free_reply r
			group by r.board_id 
		) r
		on r.board_id = f.board_id 
		group by board_id
		order by board_id desc 
		limit #{startRow}, #{rowCount}
	</select>
	
	<select id="selectAll" resultType="boardFreeDTO">
		select f.board_id , f.member_id, f.member_nickname ,  f.board_title
			, f.board_update_date, f.board_register_date , f.board_read_count , ifnull(l.like_count, 0) board_like_count, ifnull(r.reply_count, 0) board_reply_count
		from
		(
			select f.board_id , f.member_id, m.member_nickname ,  f.board_title
			, f.board_update_date, f.board_register_date , f.board_read_count 
			from tbl_board_free f
			left outer join tbl_member m
			on f.member_id = m.member_id
		) f
		left outer join 
		(
			select l.board_id, count(l.like_id) like_count
			from tbl_board_free_like l
			group by l.board_id 
		) l
		on l.board_id = f.board_id 
		left outer join
		(
			select r.board_id, count(r.reply_id) reply_count
			from tbl_board_free_reply r
			group by r.board_id 
		) r
		on r.board_id = f.board_id 
		group by board_id
		order by board_id desc 
		limit 1, 5
	</select>
	
	<select id="getTotal" parameterType="map" resultType="long">
		select count(board_id) from tbl_board_free
	</select>
	
	<select id="getReplyCount" parameterType="long" resultType="long">
		select reply_count
		from view_boardFreeList
		where board_id = #{boardId}
	</select>
	
	<insert id="insertBoard" parameterType="map">
		INSERT INTO tbl_board_free (member_id, board_title, board_content, board_register_date, board_update_date)
		VALUES(#{memberId}, #{title}, #{content}, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
	</insert>
	
	<select id="selectOneByBoardId" parameterType="long" resultType="boardFreeDTO">
select b.board_id, b.member_id, b.board_title, b.board_content, b.board_register_date
			,b.board_update_date, b.member_nickname, c.favorite_count board_favorite_count
			, c.reply_count board_reply_count, c.like_count board_like_count, b.board_read_count
		from (
			select f.board_id, f.member_id, f.board_title, f.board_content, f.board_register_date, 
			f.board_update_date, m.member_nickname, f.board_read_count
			from tbl_board_free f
			left outer join tbl_member m
			on f.member_id = m.member_id
		) b left outer join (
				select f.board_id , f.favorite_count, r.reply_count, l.like_count
			from (
				select s.board_id, sum(if(ifnull(f.favorite_id , 0)=0, 0, 1)) favorite_count
				from tbl_board_saving s left outer join tbl_favorite f 
				on s.board_id = f.board_id
				group by board_id
			) f left outer join (
				select s.board_id , sum(if(ifnull(r.reply_id, 0)=0, 0, 1)) reply_count
				from tbl_board_saving s left outer join tbl_board_saving_reply r
				on s.board_id = r.board_id
				group by board_id
			) r
			on f.board_id = r.board_id
			left outer join (
				select s.board_id , sum(if(ifnull(l.board_like_id, 0)=0, 0, 1)) like_count  
				from tbl_board_saving s left outer join tbl_board_saving_like l
				on s.board_id = l.board_id
				group by board_id
			) l
			on f.board_id = l.board_id
			group by board_id
		) c
		on b.board_id = c.board_id
		where b.board_id = #{boardId}
	</select>
	
	<select id="getCurrentSequence" resultType="long">
		select last_insert_id()
	</select>
	
	<select id="selectAllRepliesByBoardId" parameterType="long" resultType="boardFreeReplyDTO">
		select m.member_id, m.member_nickname, m.member_img_path
			,r.reply_id, r.reply_content, r.reply_register_date, r.reply_update_date
			, r.member_id, r.board_id
		from tbl_member m
		join tbl_board_free_reply r 
		on m.member_id = r.member_id
		where r.board_id = #{boardId}
	</select>
	
	
</mapper>